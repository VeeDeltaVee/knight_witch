use crate::{
    board::{chess_move::ChessMove, Board, piece::Side},
    evaluation::{Centipawns, Evaluator, self},
};

use super::Searcher;

#[derive(Clone)]
pub struct MinimaxSearch<E> {
    depth: usize,
    evaluator: E,
}

impl<E> MinimaxSearch<E>
where
    E: Evaluator,
{
    pub fn new(evaluator: E) -> Self {
        MinimaxSearch {
            depth: 4,
            evaluator,
        }
    }

    fn search_order_impl(
        &self,
        board: &Board,
        depth: usize,
    ) -> Result<Vec<(ChessMove, Centipawns)>, &'static str> {
        let moves = board.generate_moves(true)?;

        let mut evaluations = if depth == 0 {
            moves
                .iter()
                .map(|m| {
                    let mut moved_board = board.clone();

                    // We know this move shouldn't fail, since this was
                    // generated by the movegen engine
                    moved_board.make_move(m.clone(), true).unwrap();
                    (m.clone(), self.evaluator.evaluate(&moved_board))
                })
                .collect::<Vec<_>>()
        } else {
            moves
                .iter()
                .filter_map(|m| {
                    let mut moved_board = board.clone();

                    // We know this move shouldn't fail, since this was
                    // generated by the movegen engine
                    moved_board.make_move(m.clone(), true).unwrap();

                    let best = self.search_order_impl(&moved_board, depth - 1)
                        .ok()?
                        .into_iter()
                        .next();

                    best.map(|search_result| search_result)
                })
                .collect()
        };

        evaluations
            .sort_unstable_by(|(_, eval1), (_, eval2)| eval2.cmp(eval1));

        if board.get_current_side() == Side::Black {
            evaluations.reverse();
        }

        Ok(evaluations)
    }
}

impl<E> Searcher for MinimaxSearch<E>
where
    E: Evaluator,
{
    fn search_order(
        &self,
        board: &Board,
    ) -> Result<Vec<(ChessMove, Centipawns)>, &'static str> {
        self.search_order_impl(board, self.depth)
    }
}
